//
// Created by Khaing Hsu Yee on 1/2/2023.
//
#include "stdio.h"
#include  "stdlib.h"

#define MAXOFSTACK 10

int toCount=0;

struct stack{
    int data[MAXOFSTACK];

    int top;
};
typedef struct stack st;

int isStackIsFull(st *myStack){

    if(myStack->top == MAXOFSTACK-1){
        return 1;
    } else{
        return  0;
    }

}
void create_emptyStack(st *myStack){
    myStack->top =-1;
}
void pushToStack(st *myStack,int value){

    if(isStackIsFull(myStack)){
        printf("Stack is Full!");
    }else{
        myStack->top++;
        myStack->data[myStack->top]=value;
    }
}
int isStackIsEmpty(st *myStack){
    if(myStack->top == -1){
        return 1;
    }else{
        return 0;
    }
}
void popFromStack(st *myStack){
    if(isStackIsEmpty(myStack)){
        printf("Stack is empty!");
    }else{
        printf("Pop from stack data is : %d\n",myStack->data[myStack->top]);
        myStack->top--;

    }

}
int main(){
    st *myStack =(st *) malloc(sizeof (st));
    create_emptyStack(myStack);

    pushToStack(myStack,10);
    pushToStack(myStack,11);
    pushToStack(myStack,12);
    pushToStack(myStack,13);
    pushToStack(myStack,14);
    printf("The data in the stack: ");
    for(int i=myStack->top;i>-1;i--){
        printf("%d ",myStack->data[i]);
    }

    printf("\nThere are %d elements in the stack!\n",myStack->top+1);

    popFromStack(myStack);
    popFromStack(myStack);
    popFromStack(myStack);
    popFromStack(myStack);
    popFromStack(myStack);







}
